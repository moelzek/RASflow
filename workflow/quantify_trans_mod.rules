import pandas as pd
configfile: "configs/config_main.yaml"
localrules: getReads, summaryReport


samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']
trimmed = config["TRIMMED"]
if trimmed:
    input_path = config["OUTPUTPATH"] + "/trim"
else:
    input_path = config["READSPATH"]
key = config["KEY"]
end = config["END"]
intermediate_path = config["OUTPUTPATH"] + "/" + config["PROJECT"] + "/trans"
final_path = config["FINALOUTPUT"] + "/" + config["PROJECT"] + "/trans"

rule end:
    input:
        report = final_path + "/report_quantify.html"

if end == "pair":
    rule getReads:
        output:
            forward = temp(intermediate_path + "/reads/{sample}_forward.fastq.gz"),
            reverse = temp(intermediate_path + "/reads/{sample}_reverse.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("scp -i {params.key} {params.input_path}/{wildcards.sample}_*R1*.f*q.gz {output.forward}"),
            shell("scp -i {params.key} {params.input_path}/{wildcards.sample}_*R2*.f*q.gz {output.reverse}")

else:
    rule getReads:
        output:
            TCL = temp(intermediate_path + "/reads/{sample}TCL.fastq.gz")
            P100 = temp(intermediate_path + "/reads/{sample}P100.fastq.gz")
            P500 = temp(intermediate_path + "/reads/{sample}P500.fastq.gz")
            P2000= temp(intermediate_path + "/reads/{sample}P2000.fastq.gz")
            P5000 = temp(intermediate_path + "/reads/{sample}P5000.fastq.gz")
            SN = temp(intermediate_path + "/reads/{sample}SN.fastq.gz")
            SN_2 = temp(intermediate_path + "/reads/{sample}SN_2.fastq.gz")
            SN_3 = temp(intermediate_path + "/reads/{sample}SN_3.fastq.gz")
        params:
            key = key,
            input_path = input_path
        run:
            shell("cat {params.input_path}/{wildcards.sample}TCL*.f*q.gz > {output.TCL}")
            shell("cat {params.input_path}/{wildcards.sample}P100*.f*q.gz > {output.P100}")
            shell("cat {params.input_path}/{wildcards.sample}P500*.f*q.gz > {output.P500}")
            shell("cat {params.input_path}/{wildcards.sample}P2000*.f*q.gz > {output.P2000}")
            shell("cat {params.input_path}/{wildcards.sample}P5000*.f*q.gz > {output.P5000}")
            shell("cat {params.input_path}/{wildcards.sample}SN*.f*q.gz > {output.SN}")
            shell("cat {params.input_path}/{wildcards.sample}SN-2*.f*q.gz > {output.SN_2}")
            shell("cat {params.input_path}/{wildcards.sample}SN-3*.f*q.gz > {output.SN_3}")

rule indexTrans:
    input:
        trans = config["TRANS"]
    output:
        index = directory(intermediate_path + "/transcripts_index")
    shell:
        "salmon index -t {input} -i {output} --type quasi -k 31 -p {config[NCORE]}"

if end == "pair":
    rule quantify:
        input:
            forward = temp(intermediate_path + "/reads/{sample}_forward.fastq.gz"),
            reverse = temp(intermediate_path + "/reads/{sample}_reverse.fastq.gz"),
            index = directory(intermediate_path + "/transcripts_index")
        output:
            quant_dir = directory(final_path + "/quant/{sample}"),
            tpm = final_path + "/tpmFile/{sample}_tpm.tsv"
        shell:
            """
            salmon quant -i {input.index} -l A -1 {input.forward} -2 {input.reverse} -o {output.quant_dir} -p {config[NCORE]} --seqBias --useVBOpt --validateMappings --numBootstraps 50
            awk 'NR==1{{next}}{{print $1"\\t"$4}}' {output.quant_dir}/quant.sf > {output.tpm}
            """
else:
    rule quantify:
        input:
            read = temp(intermediate_path + "/reads/{sample}.fastq.gz"),
            index = directory(intermediate_path + "/transcripts_index")
        output:
            quant_dir = directory(final_path + "/quant/{sample}"),
            tpm = final_path + "/tpmFile/{sample}_tpm.tsv"
        shell:
            """
            salmon quant -i {input.index} -l A -r {input.read} -o {output.quant_dir} -p {config[NCORE]} --seqBias --useVBOpt --validateMappings --numBootstraps 50
            awk 'NR==1{{next}}{{print $1"\\t"$4}}' {output.quant_dir}/quant.sf > {output.tpm}
            """

rule summaryReport:
    input:
        quant_dir = directory(expand(final_path + "/quant/{sample}", sample = samples))
    output:
        report = final_path + "/report_quantify.html"
    shell:
        "multiqc {input} --filename {output}"
        
